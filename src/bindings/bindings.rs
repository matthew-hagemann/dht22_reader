/* automatically generated by rust-bindgen 0.71.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
pub struct gpiod_chip {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct gpiod_chip_info {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct gpiod_line_info {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct gpiod_line_settings {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct gpiod_line_config {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct gpiod_request_config {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct gpiod_line_request {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct gpiod_info_event {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct gpiod_edge_event {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct gpiod_edge_event_buffer {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn gpiod_chip_open(path: *const ::std::os::raw::c_char) -> *mut gpiod_chip;
}
unsafe extern "C" {
    pub fn gpiod_chip_close(chip: *mut gpiod_chip);
}
unsafe extern "C" {
    pub fn gpiod_chip_get_info(chip: *mut gpiod_chip) -> *mut gpiod_chip_info;
}
unsafe extern "C" {
    pub fn gpiod_chip_get_path(chip: *mut gpiod_chip) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gpiod_chip_get_line_info(
        chip: *mut gpiod_chip,
        offset: ::std::os::raw::c_uint,
    ) -> *mut gpiod_line_info;
}
unsafe extern "C" {
    pub fn gpiod_chip_watch_line_info(
        chip: *mut gpiod_chip,
        offset: ::std::os::raw::c_uint,
    ) -> *mut gpiod_line_info;
}
unsafe extern "C" {
    pub fn gpiod_chip_unwatch_line_info(
        chip: *mut gpiod_chip,
        offset: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_chip_get_fd(chip: *mut gpiod_chip) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_chip_wait_info_event(
        chip: *mut gpiod_chip,
        timeout_ns: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_chip_read_info_event(chip: *mut gpiod_chip) -> *mut gpiod_info_event;
}
unsafe extern "C" {
    pub fn gpiod_chip_get_line_offset_from_name(
        chip: *mut gpiod_chip,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_chip_request_lines(
        chip: *mut gpiod_chip,
        req_cfg: *mut gpiod_request_config,
        line_cfg: *mut gpiod_line_config,
    ) -> *mut gpiod_line_request;
}
unsafe extern "C" {
    pub fn gpiod_chip_info_free(info: *mut gpiod_chip_info);
}
unsafe extern "C" {
    pub fn gpiod_chip_info_get_name(info: *mut gpiod_chip_info) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gpiod_chip_info_get_label(info: *mut gpiod_chip_info) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gpiod_chip_info_get_num_lines(info: *mut gpiod_chip_info) -> usize;
}
pub const gpiod_line_value_GPIOD_LINE_VALUE_ERROR: gpiod_line_value = -1;
pub const gpiod_line_value_GPIOD_LINE_VALUE_INACTIVE: gpiod_line_value = 0;
pub const gpiod_line_value_GPIOD_LINE_VALUE_ACTIVE: gpiod_line_value = 1;
pub type gpiod_line_value = ::std::os::raw::c_int;
pub const gpiod_line_direction_GPIOD_LINE_DIRECTION_AS_IS: gpiod_line_direction = 1;
pub const gpiod_line_direction_GPIOD_LINE_DIRECTION_INPUT: gpiod_line_direction = 2;
pub const gpiod_line_direction_GPIOD_LINE_DIRECTION_OUTPUT: gpiod_line_direction = 3;
pub type gpiod_line_direction = ::std::os::raw::c_uint;
pub const gpiod_line_edge_GPIOD_LINE_EDGE_NONE: gpiod_line_edge = 1;
pub const gpiod_line_edge_GPIOD_LINE_EDGE_RISING: gpiod_line_edge = 2;
pub const gpiod_line_edge_GPIOD_LINE_EDGE_FALLING: gpiod_line_edge = 3;
pub const gpiod_line_edge_GPIOD_LINE_EDGE_BOTH: gpiod_line_edge = 4;
pub type gpiod_line_edge = ::std::os::raw::c_uint;
pub const gpiod_line_bias_GPIOD_LINE_BIAS_AS_IS: gpiod_line_bias = 1;
pub const gpiod_line_bias_GPIOD_LINE_BIAS_UNKNOWN: gpiod_line_bias = 2;
pub const gpiod_line_bias_GPIOD_LINE_BIAS_DISABLED: gpiod_line_bias = 3;
pub const gpiod_line_bias_GPIOD_LINE_BIAS_PULL_UP: gpiod_line_bias = 4;
pub const gpiod_line_bias_GPIOD_LINE_BIAS_PULL_DOWN: gpiod_line_bias = 5;
pub type gpiod_line_bias = ::std::os::raw::c_uint;
pub const gpiod_line_drive_GPIOD_LINE_DRIVE_PUSH_PULL: gpiod_line_drive = 1;
pub const gpiod_line_drive_GPIOD_LINE_DRIVE_OPEN_DRAIN: gpiod_line_drive = 2;
pub const gpiod_line_drive_GPIOD_LINE_DRIVE_OPEN_SOURCE: gpiod_line_drive = 3;
pub type gpiod_line_drive = ::std::os::raw::c_uint;
pub const gpiod_line_clock_GPIOD_LINE_CLOCK_MONOTONIC: gpiod_line_clock = 1;
pub const gpiod_line_clock_GPIOD_LINE_CLOCK_REALTIME: gpiod_line_clock = 2;
pub const gpiod_line_clock_GPIOD_LINE_CLOCK_HTE: gpiod_line_clock = 3;
pub type gpiod_line_clock = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn gpiod_line_info_free(info: *mut gpiod_line_info);
}
unsafe extern "C" {
    pub fn gpiod_line_info_copy(info: *mut gpiod_line_info) -> *mut gpiod_line_info;
}
unsafe extern "C" {
    pub fn gpiod_line_info_get_offset(info: *mut gpiod_line_info) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn gpiod_line_info_get_name(info: *mut gpiod_line_info) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gpiod_line_info_is_used(info: *mut gpiod_line_info) -> bool;
}
unsafe extern "C" {
    pub fn gpiod_line_info_get_consumer(
        info: *mut gpiod_line_info,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gpiod_line_info_get_direction(info: *mut gpiod_line_info) -> gpiod_line_direction;
}
unsafe extern "C" {
    pub fn gpiod_line_info_get_edge_detection(info: *mut gpiod_line_info) -> gpiod_line_edge;
}
unsafe extern "C" {
    pub fn gpiod_line_info_get_bias(info: *mut gpiod_line_info) -> gpiod_line_bias;
}
unsafe extern "C" {
    pub fn gpiod_line_info_get_drive(info: *mut gpiod_line_info) -> gpiod_line_drive;
}
unsafe extern "C" {
    pub fn gpiod_line_info_is_active_low(info: *mut gpiod_line_info) -> bool;
}
unsafe extern "C" {
    pub fn gpiod_line_info_is_debounced(info: *mut gpiod_line_info) -> bool;
}
unsafe extern "C" {
    pub fn gpiod_line_info_get_debounce_period_us(
        info: *mut gpiod_line_info,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn gpiod_line_info_get_event_clock(info: *mut gpiod_line_info) -> gpiod_line_clock;
}
pub const gpiod_info_event_type_GPIOD_INFO_EVENT_LINE_REQUESTED: gpiod_info_event_type = 1;
pub const gpiod_info_event_type_GPIOD_INFO_EVENT_LINE_RELEASED: gpiod_info_event_type = 2;
pub const gpiod_info_event_type_GPIOD_INFO_EVENT_LINE_CONFIG_CHANGED: gpiod_info_event_type = 3;
pub type gpiod_info_event_type = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn gpiod_info_event_free(event: *mut gpiod_info_event);
}
unsafe extern "C" {
    pub fn gpiod_info_event_get_event_type(event: *mut gpiod_info_event) -> gpiod_info_event_type;
}
unsafe extern "C" {
    pub fn gpiod_info_event_get_timestamp_ns(event: *mut gpiod_info_event) -> u64;
}
unsafe extern "C" {
    pub fn gpiod_info_event_get_line_info(event: *mut gpiod_info_event) -> *mut gpiod_line_info;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_new() -> *mut gpiod_line_settings;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_free(settings: *mut gpiod_line_settings);
}
unsafe extern "C" {
    pub fn gpiod_line_settings_reset(settings: *mut gpiod_line_settings);
}
unsafe extern "C" {
    pub fn gpiod_line_settings_copy(settings: *mut gpiod_line_settings)
        -> *mut gpiod_line_settings;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_set_direction(
        settings: *mut gpiod_line_settings,
        direction: gpiod_line_direction,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_get_direction(
        settings: *mut gpiod_line_settings,
    ) -> gpiod_line_direction;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_set_edge_detection(
        settings: *mut gpiod_line_settings,
        edge: gpiod_line_edge,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_get_edge_detection(
        settings: *mut gpiod_line_settings,
    ) -> gpiod_line_edge;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_set_bias(
        settings: *mut gpiod_line_settings,
        bias: gpiod_line_bias,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_get_bias(settings: *mut gpiod_line_settings) -> gpiod_line_bias;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_set_drive(
        settings: *mut gpiod_line_settings,
        drive: gpiod_line_drive,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_get_drive(settings: *mut gpiod_line_settings) -> gpiod_line_drive;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_set_active_low(settings: *mut gpiod_line_settings, active_low: bool);
}
unsafe extern "C" {
    pub fn gpiod_line_settings_get_active_low(settings: *mut gpiod_line_settings) -> bool;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_set_debounce_period_us(
        settings: *mut gpiod_line_settings,
        period: ::std::os::raw::c_ulong,
    );
}
unsafe extern "C" {
    pub fn gpiod_line_settings_get_debounce_period_us(
        settings: *mut gpiod_line_settings,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_set_event_clock(
        settings: *mut gpiod_line_settings,
        event_clock: gpiod_line_clock,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_get_event_clock(
        settings: *mut gpiod_line_settings,
    ) -> gpiod_line_clock;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_set_output_value(
        settings: *mut gpiod_line_settings,
        value: gpiod_line_value,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_settings_get_output_value(
        settings: *mut gpiod_line_settings,
    ) -> gpiod_line_value;
}
unsafe extern "C" {
    pub fn gpiod_line_config_new() -> *mut gpiod_line_config;
}
unsafe extern "C" {
    pub fn gpiod_line_config_free(config: *mut gpiod_line_config);
}
unsafe extern "C" {
    pub fn gpiod_line_config_reset(config: *mut gpiod_line_config);
}
unsafe extern "C" {
    pub fn gpiod_line_config_add_line_settings(
        config: *mut gpiod_line_config,
        offsets: *const ::std::os::raw::c_uint,
        num_offsets: usize,
        settings: *mut gpiod_line_settings,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_config_get_line_settings(
        config: *mut gpiod_line_config,
        offset: ::std::os::raw::c_uint,
    ) -> *mut gpiod_line_settings;
}
unsafe extern "C" {
    pub fn gpiod_line_config_set_output_values(
        config: *mut gpiod_line_config,
        values: *const gpiod_line_value,
        num_values: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_config_get_num_configured_offsets(config: *mut gpiod_line_config) -> usize;
}
unsafe extern "C" {
    pub fn gpiod_line_config_get_configured_offsets(
        config: *mut gpiod_line_config,
        offsets: *mut ::std::os::raw::c_uint,
        max_offsets: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn gpiod_request_config_new() -> *mut gpiod_request_config;
}
unsafe extern "C" {
    pub fn gpiod_request_config_free(config: *mut gpiod_request_config);
}
unsafe extern "C" {
    pub fn gpiod_request_config_set_consumer(
        config: *mut gpiod_request_config,
        consumer: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn gpiod_request_config_get_consumer(
        config: *mut gpiod_request_config,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gpiod_request_config_set_event_buffer_size(
        config: *mut gpiod_request_config,
        event_buffer_size: usize,
    );
}
unsafe extern "C" {
    pub fn gpiod_request_config_get_event_buffer_size(config: *mut gpiod_request_config) -> usize;
}
unsafe extern "C" {
    pub fn gpiod_line_request_release(request: *mut gpiod_line_request);
}
unsafe extern "C" {
    pub fn gpiod_line_request_get_chip_name(
        request: *mut gpiod_line_request,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gpiod_line_request_get_num_requested_lines(request: *mut gpiod_line_request) -> usize;
}
unsafe extern "C" {
    pub fn gpiod_line_request_get_requested_offsets(
        request: *mut gpiod_line_request,
        offsets: *mut ::std::os::raw::c_uint,
        max_offsets: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn gpiod_line_request_get_value(
        request: *mut gpiod_line_request,
        offset: ::std::os::raw::c_uint,
    ) -> gpiod_line_value;
}
unsafe extern "C" {
    pub fn gpiod_line_request_get_values_subset(
        request: *mut gpiod_line_request,
        num_values: usize,
        offsets: *const ::std::os::raw::c_uint,
        values: *mut gpiod_line_value,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_request_get_values(
        request: *mut gpiod_line_request,
        values: *mut gpiod_line_value,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_request_set_value(
        request: *mut gpiod_line_request,
        offset: ::std::os::raw::c_uint,
        value: gpiod_line_value,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_request_set_values_subset(
        request: *mut gpiod_line_request,
        num_values: usize,
        offsets: *const ::std::os::raw::c_uint,
        values: *const gpiod_line_value,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_request_set_values(
        request: *mut gpiod_line_request,
        values: *const gpiod_line_value,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_request_reconfigure_lines(
        request: *mut gpiod_line_request,
        config: *mut gpiod_line_config,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_request_get_fd(request: *mut gpiod_line_request) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_request_wait_edge_events(
        request: *mut gpiod_line_request,
        timeout_ns: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpiod_line_request_read_edge_events(
        request: *mut gpiod_line_request,
        buffer: *mut gpiod_edge_event_buffer,
        max_events: usize,
    ) -> ::std::os::raw::c_int;
}
pub const gpiod_edge_event_type_GPIOD_EDGE_EVENT_RISING_EDGE: gpiod_edge_event_type = 1;
pub const gpiod_edge_event_type_GPIOD_EDGE_EVENT_FALLING_EDGE: gpiod_edge_event_type = 2;
pub type gpiod_edge_event_type = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn gpiod_edge_event_free(event: *mut gpiod_edge_event);
}
unsafe extern "C" {
    pub fn gpiod_edge_event_copy(event: *mut gpiod_edge_event) -> *mut gpiod_edge_event;
}
unsafe extern "C" {
    pub fn gpiod_edge_event_get_event_type(event: *mut gpiod_edge_event) -> gpiod_edge_event_type;
}
unsafe extern "C" {
    pub fn gpiod_edge_event_get_timestamp_ns(event: *mut gpiod_edge_event) -> u64;
}
unsafe extern "C" {
    pub fn gpiod_edge_event_get_line_offset(event: *mut gpiod_edge_event)
        -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn gpiod_edge_event_get_global_seqno(
        event: *mut gpiod_edge_event,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn gpiod_edge_event_get_line_seqno(event: *mut gpiod_edge_event)
        -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn gpiod_edge_event_buffer_new(capacity: usize) -> *mut gpiod_edge_event_buffer;
}
unsafe extern "C" {
    pub fn gpiod_edge_event_buffer_get_capacity(buffer: *mut gpiod_edge_event_buffer) -> usize;
}
unsafe extern "C" {
    pub fn gpiod_edge_event_buffer_free(buffer: *mut gpiod_edge_event_buffer);
}
unsafe extern "C" {
    pub fn gpiod_edge_event_buffer_get_event(
        buffer: *mut gpiod_edge_event_buffer,
        index: ::std::os::raw::c_ulong,
    ) -> *mut gpiod_edge_event;
}
unsafe extern "C" {
    pub fn gpiod_edge_event_buffer_get_num_events(buffer: *mut gpiod_edge_event_buffer) -> usize;
}
unsafe extern "C" {
    pub fn gpiod_is_gpiochip_device(path: *const ::std::os::raw::c_char) -> bool;
}
unsafe extern "C" {
    pub fn gpiod_api_version() -> *const ::std::os::raw::c_char;
}
